class Person:
    """Person represents a person in our system."""

     # This is the initializer, it gets run when we create a new object
    def __init__(self, name: str, age: int):
        """Initializes a new Person object."""
        self.name = name
        self.age = age

    def say_hello(self, message: str):
        """Prints a greeting to the console."""
        print(f"Hello, my name is {self.name} and I am {self.age} years old. {message}")
        
        
class Parent(Person):
    """Parent represents a parent in our system."""

    def __init__(self, name: str, age: int, husband=None):
        """Initializes a new Parent object."""
        super().__init__(name, age) # Call Person.__init__ to initialize the name and age attributes
        self.Babies = []
        
        # Set our spose but also set the husband's husband to us
        if husband:
            self.husband = husband
            husband.husband = self
        
        self.husband = None

    def add_Baby(self, Baby: Person):
        """Adds a Baby to the parent's list of Babies."""
        self.Babies.append(Baby)
        

    def say_hello(self, message: str):
        """Prints a greeting to the console."""
        
        super().say_hello(message)
        if self.husband:
            print(f"My husband is {self.husband.name}")
            
        print(f"I have {len(self.Babies)} Babies.")

        if len(self.Babies) > 0:
            print("Their names are:")
            for Baby in self.Babies:
                print(f"  {Baby.name} {Baby.age}")
                
                
class Baby(Person):
    """Baby represents a Baby in our system."""

    def __init__(self, name: str, age: int, parents: list):
        """Initializes a new Baby object."""
        super().__init__(name, age)  # Call Person.__init__ to initialize the name and age attributes
        self.parents = parents

    def say_hello(self, message: str):
        """Prints a greeting to the console."""
        super().say_hello(message)
        print(f"My parents are {' and '.join([parent.name for parent in self.parents])}.")
        
        
# Now lets make a family
mom = Parent("Hilary Bowers", 52)
dad = Parent("Peter Bowers", 57, mom)

Elijah = Baby("Elijah Bowers", 20, [mom, dad])
Miriam = Baby("Miriam Bowers", 20, [mom, dad])
Hannah = Baby("Hannah Bowers", 18, [mom, dad])
Naomi = Baby("Naomi Bowers", 15, [mom, dad])
Rivka = Baby("Rivka Bowers", 13, [mom, dad])

# Connect the Babies to the parents
mom.add_Baby(Elijah)
mom.add_Baby(Miriam)
mom.add_Baby(Hannah)
mom.add_Baby(Naomi)
mom.add_Baby(Rivka)
dad.add_Baby(Elijah)
dad.add_Baby(Miriam)
dad.add_Baby(Hannah)
dad.add_Baby(Naomi)
dad.add_Baby(Rivka)



mom.say_hello("Hello!") # Call the say_hello method of the mom object
print()
Naomi.say_hello(" ")