class Person:
    """Person represents a person in our system."""

     # This is the initializer, it gets run when we create a new object
    def __init__(self, name: str, age: int):
        """Initializes a new Person object."""
        self.name = name
        self.age = age

    def say_hello(self, message: str):
        """Prints a greeting to the console."""
        print(f"Hello, my name is {self.name} and I am {self.age} years old. {message}")
        
        
class Parent(Person):
    """Parent represents a parent in our system."""

    def __init__(self, name: str, age: int, spouse=None):
        """Initializes a new Parent object."""
        super().__init__(name, age) # Call Person.__init__ to initialize the name and age attributes
        self.children = []
        
        # Set our spose but also set the spouse's spouse to us
        if spouse:
            self.spouse = spouse
            spouse.spouse = self
        
        self.spouse = None

    def add_child(self, child: Person):
        """Adds a child to the parent's list of children."""
        self.children.append(child)
        

    def say_hello(self, message: str):
        """Prints a greeting to the console."""
        
        super().say_hello(message)
        if self.spouse:
            print(f"My spouse is {self.spouse.name}")
            
        print(f"I have {len(self.children)} children.")

        if len(self.children) > 0:
            print("Their names are:")
            for child in self.children:
                print(f"  {child.name} {child.age}")
                
                
class Child(Person):
    """Child represents a child in our system."""

    def __init__(self, name: str, age: int, parents: list):
        """Initializes a new Child object."""
        super().__init__(name, age)  # Call Person.__init__ to initialize the name and age attributes
        self.parents = parents

    def say_hello(self, message: str):
        """Prints a greeting to the console."""
        super().say_hello(message)
        print(f"My parents are {', '.join([parent.name for parent in self.parents])}")
        
        
# Now lets make a family
mom = Parent("Hilary Bowers", 52)
dad = Parent("Peter Bowers", 57, mom)

Elijah = Child("Elijah Bowers", 20, [mom, dad])
Miriam = Child("Miriam Bowers", 20, [mom, dad])
Hannah = Child("Hannah Bowers", 18, [mom, dad])
Naomi = Child("Naomi Bowers", 15, [mom, dad])
Rivka = Child("Rivka Bowers", 13, [mom, dad])

# Connect the children to the parents
mom.add_child(Elijah)
mom.add_child(Miriam)
mom.add_child(Hannah)
mom.add_child(Naomi)
mom.add_child(Rivka)
dad.add_child(Elijah)
dad.add_child(Miriam)
dad.add_child(Hannah)
dad.add_child(Naomi)
dad.add_child(Rivka)



mom.say_hello("Hello!") # Call the say_hello method of the mom object
print()
Naomi.say_hello("Yo!")